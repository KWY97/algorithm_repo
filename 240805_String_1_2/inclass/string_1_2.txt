패턴 매칭

1. 고지식한 패턴 검색 알고리즘
 본문 문자열을 처음부터 끝까지 차례대로 순회하면서 패턴 내의 문자들을 일일이 비교하는 방식으로 동작
 최악의 경우 시간 복잡도는 텍스트의 모든 위치에서 패턴을 비교해야 하므로 O(MN)이 된다.


2. KMP 알고리즘
 불일치가 발생한 텍스트의 스트링의 앞 부분에 어떤 문자가 있는지를 미리 알고 있으므로, 불일치가 발생한 앞 부분에 대하여 다시 비교하지 않고 매칭을 수행
 패턴을 전처리하여 배열 next[M]을 구해서 잘못된 시작을 최소화함
  next[M]: 불일치가 발생했을 경우 이동할 다음 위치
 시간 복잡도는 O(M+N)이다.


3. 보이어-무어 알고리즘
 대부분의 상용 소프트웨어엣 채택하고 있는 알고리즘
 보이어-무어 알고리즘은 패턴에 오른쪽 끝에 있는 문자가 불일치 하고
 이 문자가 패턴 내에 존재하지 않는 경우, 이동 거리는 무려 패턴의 길이만큼이 된다.


<오늘의 목표>
고지식한 알고리즘을 이용해서 일단 구현할 수 있게 해보자.
KMP 알고리즘을 이용하면 좀 더 효율적인 패턴 매칭이 가능하다 정도로 가볍게 알아야 할 듯
KMP 보다 조금 더 효율적인 방법은 보이어-무어 알고리즘이라는 것이 있구나 라는 개념 정도는 알아야 할 듯

- 시험 준비 시
고지식한 알고리즘은 구현할 수 있어야 할 것 같고, 그것을 보완 하는 것이 KMP와 보이어-무어가 있으며,
각 방식이 어떻게 동작하는지 간단한 개념, 특징과 원리는 알고 있어야 할 듯.
(KMP와 보이어-무어는 우리에게 구현은 시키지 않는다고 함)

