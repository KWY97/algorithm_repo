*) 지금까지 배운 자료구조
- 선형 구조 (순서O)
스택
큐
덱
연결리스트

- 비선형 구조 (순서X, index 사용이 제한됨)
딕셔너리
set
해쉬
그래프


<트리의 개념> (*) 특수한 그래프)
- 비선형 구조
- 원소들 간에 1:n 관계를 가지는 자료구조
- 원소들 간에 계층관계를 가지는 계층형 자료구조

!!! (트리가 계층구조라는 점에서 찾을 수 있는 특징) !!!
- 형제노드 끼리 연결을 할 수 없다. so 싸이클이 없다.
- 부모가 다른 자손끼리 연결을 할 수 없다.
- 쉽게 말해 무조건 위아래가 존재한다.

- 한 개 이상의 노드로 이루어진 유한 집합이며 다음 조건을 만족한다.
 - 노드 중 최상위 노드를 루트(root)라 한다.
 - 나머지 노드들은 n(>=0)개의 분리 집합 T1, ..., TN으로 분리될 수 있다.

- 이들 T1, ..., TN은 각각 하나의 트리가 되며(재귀적 정의) 루트의 부 트리(subtree)라 한다.
- *) 한 개만 있어도 트리가 될 수 있다.
     So subtree들이 모여서 추가적인 subtree를 만들고 그것들이 합쳐져서 전체 tree를 만들고,
     최상위는 root node라고 부른다.


<용어 정리>
노드(node) - 트리의 원소
간선(edge) - 노드를 연결하는 선. 부모 노드와 자식 노드를 연결
루트 노드(root node) - 트리의 시작 노드
형제 노드(sibling node) - 같은 부모 노드의 자식 노드들
조상 노드 - 간선을 따라 루트 노드까지 이르는 경로에 있는 모든 노드들
서브 트리(subtree) - 부모 노드와 연결된 간선을 끊었을 때 생성되는 트리
자손 노드 - 서브 트리에 있는 하위 레벨의 노드들

*) '부모-자식'은 일반적으로 직계(1단계로 연결)를 나타낸다.
   2단계 이상으로 연결되면 조상이나 자손으로 얘기해준다.

차수(degree)
 - 노드의 차수: 노드에 연결된 '자식 노드'의 수
 - 트리의 차수: 트리에 있는 노드의 차수 중에서 가장 큰 값
 - !!! 단말 노드(leaf node): 차수가 0인 노드 (자식 노드가 없는 노드) !!! - 시험 삘

높이
 - 노드의 높이: 루트에서 노드에 이르는 간선의 수. 노드의 레벨
 - 트리의 높이: 트리에 있는 노드의 높이 중에서 가장 큰 값. 최대 레벨
 *) 루트 노드를 기준으로 함. 루트 노드 높이: 0. 단계가 내려갈수록 높이가 1씩 증가
 *) 몇 번 만에 찾을 수 있냐, 몇 번 만에 연결되어 있나 같은 것과 높이과 관련