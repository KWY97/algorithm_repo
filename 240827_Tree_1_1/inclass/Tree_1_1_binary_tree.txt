<이진 트리> - !! 이진 트리를 토대로 만들어진 알고리즘이 많기 때문에 매우 중요한 자료 구조 !!
 - 모든 노드들이 '최대' 2개의 서브트리를 갖는 특별한 형태의 트리
 - 각 노드가 자식 노드를 '최대' 2개 까지만 가질 수 있는 트리
   - 왼쪽 자식 노드(left child node)
   - 오른쪽 자식 노드(right child node)


<특징>
 - 레벨 i에서의 노드의 최대 개수는 2**i개, 레벨 i에서의 노드의 최소 개수는 i개
 - !!! 높이가 h인 이진 트리가 가질 수 있는 노드의 최소 개수는 'h+1'개가 되며, 최대 개수는 '2**(h+1)-1'개가 된다. !!!
 (시간 복잡도 계산을 높이로 하기 때문에 잘 익혀야 함. 중요하다.)


<종류>
 1. 포화 이진 트리(Full Binary Tree)
  - 모든 레벨에 노드가 포화상태로 차 있는 이진 트리
  - 높이가 h일 때, 최대의 노드 개수인 '2**(h+1)-1'의 노드를 가진 이진트리
  - 루트노드를 1번으로 하여 '2**(h+1)-1'까지 정해진 위치에 대한 노드 번호를 가짐
  - 굉장히 쉬운 형태이기 때문에 우리가 지향해야할 종류

 2. 완전 이진 트리(Complete Binary Tree)
  - 높이가 h이고 노드 수가 n개 일 때(단, 2**h <= n <= 2**(h+1)-1),
    포화 이진 트리의 노드 번호 1번부터 n번까지 '빈 자리가 없는' 이진 트리

 3. 편향 이진 트리(Skewed Binary Tree)
  - 높이 h에 대한 최소 개수의 노드를 가지면서 한쪽 방향의 자식 노드만을 가진 이진 트리
    - 왼쪽 편향 이진 트리
    - 오른쪽 편향 이진 트리

*) '이진 트리' -> 순서대로 빈 자리 없이 넣었다면 -> '완전 이진 트리' -> 모든 레벨의 노드가 포화 상태가 됐다면 -> '포화 이진 트리'
*) 일반 '이진 트리'에서 빈 부분의 번호는 0으로 채워 넣어 놓으면 된다. (offline 수업 때 얘기해주심)


<순회> - 트리의 노드들을 체계적으로 방문하는 것
 - 트리의 각 노드를 중복되지 않게 전부 방문(visit)하는 것을 말함.
   트리는 비선형 구조이기 때문에 선형구조에서와 같이 선후 연결 관계를 알 수 없어서 특별한 방법이 필요하다.

 - 기본적인 순회방법 - !! 3가지 다 그림 그릴 수 있어야 함 !! 교재 24p 그림 그리기 연습 (코드보다 그림이 제일 중요)
   (왜냐하면 실제 개발이나 코테때 코드가 별로 안쓰인다. -> 이유: 낭비되는 공간이 많다.)
 1. 전위순회(preorder traversal) - 부모 노드 방문 후, 자식 노드를 좌, 우 순서로 방문 (VLR)
   - 수행 방법
    1) 현재 노드 n을 방문하고 방문 처리
    2) 현재 노드 n의 왼쪽 서브트리로 이동
    3) 현재 노드 n의 오른쪽 서브트리로 이동

 2. 중위순회(inorder traversal) - 왼쪽 자식노드, 부모 노드, 오른쪽 자식 노드 순으로 방문 (LVR)
   - 수행 방법
    1) 현재 노드 n의 왼쪽 서브트리로 이동
    2) 현재 노드 n을 방문하고 방문 처리 (현재 노드 n의 왼쪽 서브토리가 없을 때 방문처리 하는 것)
    3) 현재 노드 n의 오른쪽 서브트리로 이동

 3. 후위순회(postorder traversal) - 자식 노드를 좌우 순서로 방문한 후, 부모 노드로 방문 (LRV)
   - 수행 방법
    1) 현재 노드 n의 왼쪽 서브토리로 이동
    2) 현재 노드 n의 오른쪽 서브토리로 이동
    3) 현재 노드 n을 방문하고 방문 처리

<표현>
 - 배열을 이용한 이진 트리의 표현 (root node가 1일 때 가능)
   - 노드 번호가 i인 노드의 부모 노드 번호 i//2
   - 노드 번호가 i인 노드의 왼쪽 자식 노드 번호 2*i
   - 노드 번호가 i인 녿의 오른쪽 자식 노드 번호 2*i+1
   - 레벨 n의 노드 번호 시작 번호는 ? 2**n

  - 배열을 이용한 이진 트리 표현의 단점
   - 편향 이진 트리의 경우에 사용하지 않는 배열 원소에 대한 메모리 공간 낭비 발생
   - 트리의 중간에 새로운 노드를 삽입하거나 기존의 노드를 삭제할 경우 배열의 크기 변경이 어려워 비효율적이다.

  - 그래서 실제 개발(정석)에서는 연결 리스트를 사용해서 이진 트리를 표현한다.

<이진 트리의 저장>
 - 부모 번호를 인덱스로 left 배열, right 배열에 각 자식의 번호를 저장
 - parent 배열: 자식 번호를 인덱스로 부모 번호를 저장 (root를 알기 위해)

