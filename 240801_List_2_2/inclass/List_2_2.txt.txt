검색
 저장되어 있는 자료 중에서 원하는 항목을 찾는작업
 목적하는 탐색 키를 가진 항목을 찾는 것 (탐색 키: 자료를 구별하여 인식할 수 있는 키)

검색의 종류
 순차 검색 
 이진 검색
 해쉬 (자세히 다루지는 않는다고 함)

<1. 순차 검색>
일렬로 되어 있는 자료를 순서대로 검색하는 방법 (ex. 배열(list), linked list(다루지는 않는다고 함))
 - 가장 간단하고, 직관적인 검색 방법
 - 알고리즘이 단순해 구현이 쉽지만, 검색 대상의 수가 많은 경우에는 수행시간이 급격히 증가해 비효율적

2가지 경우
 - 정렬되어 있지 않은 경우 - 시간 복잡도: O(n)
 - 정렬되어 있는 경우 - 시간 복잡도: O(n)

*) 정렬되어 있지 않은 경우보다 정렬되어 있는 경우가 빠르지만 정렬을 한다는 것 자체도 시간이 걸리기 때문에 총 시간을 잘 비교해야함

정렬되어 있지 않은 경우의 검색과정
 첫 번째 원소부터 순서대로 검색 대상과 키 값이 같은 원소가 있는지 비교하며 찾음
 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환
 자료구조의 마지막에 이를 때까지 검색 대상을 찾지 못하면 검색 실패
  *) i < n and a[i] != key 순서로 해야댐 (단축평가 때문)

정렬되어 있는 경우
 자료가 오름차순으로 정렬된 상태라고 가정
 자료를 순차적으로 검색하면서 키 값을 비교하고, 원소의 키 값이 검색 대상의 키 값보다 크면 찾는 원소가 없다는 것이므로 더 이상 검색하지 않고 검색을 종료함
 (오름차순이므로 검색 대상의 키 값보다 원소의 키 값이 크다는 것은 그 뒤로 가도 검색 대상의 키는 없다는 말)
 *) i < n and a[i] < key 순서로 해야댐 (단축평가 때문)


<2. 이진 검색>
자료의 가운데에 있는 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속 진행하는 방법
(홀수인 경우는 (staet + end)// 해서 가운데 찍을 수 있음, 짝수일 경우는 (staet + end)// 해서 정 가운데는 아니라도 그냥함)
이진 검색을 하기 위해서는 자료가 '정렬된 상태'여야 함
이진 검색의 경우, 자료에 삽입이나 삭제가 발생했을 때 배열의 상태를 항상 정렬 상태로 유지하는 추가 작업이 필요함
 
구현
 검색 범위의 시작점과 종료점을 이용해 검색을 반복 수행함
 

<선택 정렬>
주어진 자료들 중 가장 작은 값의 원소부터 차례대로 선택하여 위치를 교환하는 방식 - 시간 복잡도: O(n^2)

정렬과정
 - 주어진 리스트 중에서 최소값을 찾는다
 - 그 값을 리스트의 맨 앞에 위치한 값과 교환
 - 맨 처음 위치를 제외한 나머지 리스트를 대상으로 위의 과정을 반복 

버블솔트 예시는 구간의 끝이 앞으로 가는 경우 였는데, 선택 정렬의 예시는 구간의 시작이 뒤로 가는 경우

연습문제 3 델타로 풀기
 