<온라인 강의>

*) 공부 방법 추천: 외워서 안보고 풀려고 하기보다 반복을 통해 익숙해지는 것이 시간적으로 더 효율이 좋다.

재귀 함수로 구현하는 경우 엄청난 중복호출이 존재한다.
이를 해결하기 위한 방법을 오늘 다룬다.

Memoization - 마지막에 잘 기억해두라고 넌지시 말함 (딱히 크게 강요는 아닌 것 같은 느낌)
 컴퓨터 프로그램을 실행할 때 이전에 계산한 값을 메모리에 저장해서 매번 다시 계산하지 않도록 하여
 전체적인 실행속도를 빠르게 하는 기술 (동적 계획법의 핵심이 되는 기술)

 새로운 문제에 메모에제이션을 적용하려면 수식을 먼저 알아 내는 것이 필요

    ex) 피보나치 수열을 moemoization한 것
    '''
    def fibo_memo(n):
        if n >= 2 and memo[n] == 0: memo[n] == 0 은 계산된 적이 없으면 이라는 뜻
            memo[n] = fibo_memo(n-1) + fibo_memo(n-2)
        return memo[n]

    n = 10
    memo = [0] * (n+1)
    memo[0] = 0
    memo[1] = 1
    print(fibo_memo(n))
    '''


Dynamic Programming(동적 계획) - 우리는 DP를 크게 안다룸(나중에 난이도 높은 코테 문제에선 필요하다고 함),
                                우선은 이런 방식이 있다 정도로 알고 넘기면 된다고 함
 동적 계획 알고리즘은 그리디 알고리즘과 같이 !!!최적화 문제!!!를 해결하는 알고리즘

 동적 계획 알고리즘은 먼저 입력 크기가 작은 부분 문제들을 모두 해결한 후에 그 해들을 이용하여
 보다 큰 크기의 부분 문제들을 해결하여, 최종적으로 원래 주어진 입력의 문제를 해결하는 알고리즘


 1) 문제를 부분 문제로 분할한다.
 2) 부분 문제로 나누는 일을 끝냈으면 가장 작은 부분 문제부터 해를 구한다.
 3) 그 결과는 테이블에 저장하고, 테이블에 저장된 부분 문제의 해를 이용하여 상위 문제의 해를 구한다.

    ex) 피보나치 수열을 DP한 것
    '''
    def fibo_dp(n):
        f = [0] * (n+1)
        f[0] = 0
        f[1] = 1
        for i in range(2, n+1):
            f[i] = f[i-1] + f[i-2]

        return f[n]
    '''

 DP의 구현 방식 - recursive 방식(fibo_memo()), iterative 방식(fibo_dp())
  memoization을 재귀적 구조에 사용하는 것보다 반복적 구조로 DP를 구현한 것이 성능 면에서 보다 효율적
  재귀적 구조는 내부에 시스템 호출 스택을 사용하는 오버헤드가 발생하기 때문


!!! DFS, BFS !!!
 비선형 구조인 그래프 구조는 그래프로 표현된 모든 자료를 '빠짐없이 검색'하는 것이 중요함 (상황에 따라 건너뛰고 검색할 때도 있지만 우선은 우리는 빠짐없이 검색하는 것을 목표)
 (비선형 구조는 1:N or N:N, 그래프는 N:N이다.)

 두 가지 방법
 1. 깊이 우선 탐색 (Depth First Search ,DFS)
 2. 너비 우선 탐색 (Breadth First Search, BFS)


DFS
 강사님 설명
 탐색을 하다가 갈림길을 만나면 하나를 선택해서 계속 탐색하다가 더 이상 갈 곳이 없게 되면
 가장 마지막에 만난 갈림길로 돌아가서 안갔던 경로로 다시 탐색
 -> 이렇게 쭉 반복해서 모든 곳을 탐색하는 것
 (갈림길에서 오른쪽부터 가냐, 왼쪽부터 가냐, 넓은 곳 부터 가냐 등 기준은 내가 고르는 것)
 (어떤 것을 고르냐에 따라 탐색경로가 달라짐)

 가장 마지막에 만났던 갈림길로 되돌아가서 다시 탐색을 반복해야 하므로 후입선출 구조의 스택 사용!
 참고) 스택 말고 재귀도 가능

 - 교재 참고 부분 (로봇이 움직이는 그림) 보면서 이 설명 보면 이해 잘됨
 1) 시작 정점 v를 결정하여 방문한다.
 2) 정점 v에 인접한 정점 중에서
  a) 방문하지 않은 정점 w가 있으면, 정점 v를 스택에 push하고 정점 w를 방문한다.
     그리고 w를 v로 하여 다시 2)를 반복한다.
  b) 방문하지 않은 정점이 없으면, 탐색의 방향을 바꾸기 위해 스택을 pop하여
     받은 가장 마지막 방문 정점을 v로 하여 다시 2)를 반복한다.
 3) 스택이 공백이 될 때까지 2)를 반복한다.

연습문제 3
그래프 문제의 경우 원래는 연결 관계 뿐만 아니라, 마지막 점과 연결선의 개수도 주어져야함
연습문제 3은 연결관계만 주어져 있음

+) 처음에 마지막 정점인 7도 주어져야 함
+) 간선(연결선)의 개수인 8도 주어져야 함

2차원 배열 형태로 만들어서 풀어보라고 함

*) DFS 읽고 이해 -> 그림으로 이해 -> 그림을 따라가며 손으로 적어보며 이해 -> 코드와 주석 이해 -> 코드 구현




<오프라인 강의>
*) DFS 너무 어렵다 싶으면 과감하게 skip 하라고 함, 하면 좋지만 뒤에 또 하니 너무 하루종일 잡혀있지 말란 말
*) !!!하지만 DFS가 어떤 식으로 작동하는지는 꼭 알아야함!!! - 이렇게 말하는 건 이유가 있다고함. 시험 100% 나올 듯

dp는 bottom-up이고 memoization은 top-down이다.
dp는 문제의 전체적인 동작 방법을 이해해야 쓸 수 있음.

240806 hw: pascal 강의
- sol_1 -> 이해완료
 코드로 구현하면 쉽지만 생각하기 어려운 코드.
 기저조건(시작과 끝은 1이다)을 찾고, 하나 하나 적어보며 나머지 규칙을 찾아야 함
 그리고 코드로 구현하면 됨. 하나하나 적어보며 접근하는 것이 중요함
 sol_1 방식을 메모이제이션해서 해보기


DFS - 인접 행렬, 인접 리스트 - 데이터 트랙 강의자료 보기.
 선형구조: 순차적으로 쌓이는 경우 (ex: 스택, 큐 등)
 비선형 구조: 원소들 간에 1:N 혹은 N:N 관계를 가지는 자료구조 (ex: 트리(1:N), 그래프(N:N) 등)

 선형 구조는 for문 돌리면 순서대로 하나씩 빠짐없이 접근 가능
 비선형 구조의 각 원소들에 '빠짐없이' 접근 하기 위해 DFS를 쓰는 것.

 보통 문제에서는 연습문제 3처럼 입력이 주어진다.
 연습문제3 처럼 입력 주어졌을 때 인접리스트 만들 줄 알아야함
 연습문제3 dfs_practice랑 dfs_graph보면서 인접행렬, 인접리스트써서 해결해보기

































