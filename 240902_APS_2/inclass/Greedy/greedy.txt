<Greedy (탐욕 알고리즘)>
 결정이 필요할 때, 현재 기준으로 가장 좋아 보이는 선택지로 결정하여 답을 도출하는 알고리즘

대표적인 문제해결기법 (순서대로 진행하면 됨. 시간 초과 시 다음 기법 쓰는 식)
1. 완전탐색 : 답이 될 수 있는 모든 경우를 시도해보는 알고리즘
2. Greedy: 결정이 필요할 때 가장 좋아 보이는 선택지로 결정하여 답을 도출하는 알고리즘
3. DP: 현재에서 가장 좋아 보이는 것을 선택하는 것이 아니라, 과거의 데이터를 이용해 현재의 데이터를 만들어내는 문제해결기법
4. 분할정복: 큰 문제를 작은문제로 나누어 해결하는 문제해결기법

그리디의 핵심 조건
탐욕적 선택 조건(Greedy Choice Property): 각 단계의 선택이 이후 선택에 영향을 주지 않는다.
최적 부분 구조(Optimal Substructure): 각 단계의 최선의 선택이, 전체 문제의 최선의 해가 된다.

1. 각 단계에서 최적해를 찾아야 한다.
2. 단계의 결과들을 합하는 방법을 찾아야 한다.
3. 각 단계의 합 == 전체 문제의 합이라는 것을 증명해야한다.

그리디 문제들을 잘해결하기 위한 유일한 방법 -> 유형을 많이 보자. (DP도 마찬가지)
계속 보면서 익숙해지고, 감을 잡아야 함. 실력늘리기 어려운 파트.

그리디는 규칙을 계속 내고, 그 규칙에 대한 반례를 계속 찾는 식으로 진행하면 된다.
손으로 규칙 적어보고 반례를 찾고 하는 것에 시간을 많이 쏟아보면 좋다.

회의실 문제같은 유형을 활동 선택문제 라고 한다.