지난 번까지 배운 것의 포인트: 배열의 인덱스로 접근하는 것에 익숙해 질 필요 있다.

스택
 물건을 쌓아 올리듯 자료를 쌓아 올린 형태의 자료구조
 스택에 저장되는 자료는 선형 구조를 갖는다.
  선형 구조: 자료 가느이 관계가 1대1의 관계를 갖는다.
  비선형 구조: 자료 간의 관계가 1:N의 관계를 갖는다. (예: 트리)
 스택에 자료를 삽입하거나 스택에서 자료를 꺼낼 수 있다.

 특성 (잘 기억하라고 함)
  마지막에 삽입한 자료를 가장 먼저 꺼낸다.
   후입선출(LIFO, Last-in-Fisrt-Out) - !!! 꼭 외워야 하는 부분 !!!
   예: 스택에 1, 2, 3 순으로 자료를 삽입한 후 꺼내면 역순인 3, 2, 1순으로 꺼낼 수 있다.

스택과 관련된 자료구조 및 연산
 자료구조: 자료를 선형으로 저장할 저장소
  배열을 사용할 수 있다.
  저장소 자체를 스택이라 부르기도 한다.
  스택에서 마지막 삽입된 원소의 위치를 top이라 부른다. (배열의 인덱스로 치면 -1이라고 생각)

 연산
  삽입: 저장소에 자료를 저장한다. 보통 push라고 부른다.
  삭제: 저장소에서 자료를 꺼낸다. 꺼낸 자료는 삽입한 자료의 역순으로 꺼낸다. 보통 pop이라 부른다.
  isEmpty: 스택이 공백인지 아닌지를 확인하는 연산
  peek: 스택의 top에 있는 item(원소)을 반환하는 연산

스택의 push 알고리즘
 append 메소드를 통해 리스트의 마지막 데이터를 삽입

 '''
 def push(item)
     s.append(item)
 '''

 스택을 활용한 복잡한 알고리즘의 경우 -> 전체 구조 파악이 우선 -> 그래서 일단 append로 스택 만들어 놓고 생각해도 좋다.
 하지만 문제 해결을 위해 스택 만든 후 구조에 대한 정확한 파악이 필요하다.

 참고: append는 연산이 오래 걸린다. 왜냐하면 item을 하나씩 추가하는 것이 아니고, 넉넉한 크기의 공간을 만들고 item을 추가하고,
 공간이 다 차면 또 넉넉한 크기의 공간을 만들고 추가하는 방식이기 때문

스택의 pop 알고리즘
 '''
 def pop():
     if len(s) == 0:
         # underflow를 나타낼 문구 아무거나 표시하면 좋다.
         return
     else:
         return s.pop()
 '''
 끝에 부터 날리려면 pop(), 앞에부터 날리려면 pop(0)하면 된다.

Stack_1_1.py에 작성한 알고리즘이 어려우면 append, pop만 써서 해도된다.


스택 구현 고려 사항
 1차원 배열을 사용해 구현할 경우 구현이 용이하다는 장점이 있지만 스택의 크기를 변경하기가 어렵다는 단점이 있다.

 이를 해결하기 위한 방법으로 저장소를 동적으로 할당하여 스택을 구현하는 방법이 있다.
 동적 연결리스트를 이용하여 구현하는 방법을 의미한다. 구현이 복잡하다는 단점이 있지만 메모리를 효율적으로 사용한다는 장점을 가진다.
 (우리는 안배움. "그냥 이런 방식이 있다."로 이해하면 됨)


스택의 응용1: 괄호검사 - 대표적인 예이니까 !!! 잘 기억하기 !!! - 연습문제2
 괄호의 짝이 맞는지 안맞는지 검사하는 것
 1. 왼쪽 괄호의 개수와 오른쪽 괄호의 개수가 같아야 한다
 2. 같은 괄호에서 왼쪽 괄호는 오른쪽 괄호보다 먼저 나와야 한다.
 3. 괄호 사이에는 포함 관계만 존재한다.

 여는 괄호 나오면 push, 닫는 괄호 나오면 pop해서 비교


스택의 응용2: function call - 이해가 잘안됨, 강의다기듣고 필기하며 다시 보기 - !!! 뒤를 위해 잘 이해해야 한다고함 !!!
 프로그램에서의 함수 호출과 복귀에 따른 수행 순서를 관리
  가장 마지막에 호출된 함수가 가장 먼저 실행을 완료하고 복귀하는 후이선출 구조이므로,
  후입선출 구조의 스택을 이용하여 수행순서 관리
 당연한 소리인 것 같음. 함수 호출 시 스택의 구조가 활용된다.


재귀호출 - !!! 오프라인 강사님 피셜 중요 !!!
 필요한 함수가 자신과 같은 경우 자신을 다시 호출하는 구조
 마지막에 구한 하위 값을 이용하여 상위 값을 구하는 작업을 반복

 함수에서 실행해야 하는 작업의 특성에 따라 일반적인 호출 방식보다 재귀호출 방식을 사용하여 함수를 만들면
 !!프로그램의 크기를 줄이고!! 간단하게 작성할 수 있다.






